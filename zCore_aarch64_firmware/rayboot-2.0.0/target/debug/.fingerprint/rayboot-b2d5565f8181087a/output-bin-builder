{"$message_type":"diagnostic","message":"non-local `impl` definition, `impl` blocks should be written at the same level as their item","code":{"code":"non_local_definitions","explanation":null},"level":"warning","spans":[{"file_name":"src/bin/builder.rs","byte_start":2240,"byte_end":2258,"line_start":97,"line_end":97,"column_start":8,"column_end":26,"is_primary":false,"text":[{"text":"struct FirmwareParseError;","highlight_start":8,"highlight_end":26}],"label":"`FirmwareParseError` is not local","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/builder.rs","byte_start":2183,"byte_end":2202,"line_start":96,"line_end":96,"column_start":17,"column_end":36,"is_primary":false,"text":[{"text":"#[derive(Debug, displaydoc::Display, Eq, PartialEq, Copy, Clone)]","highlight_start":17,"highlight_end":36}],"label":"`Display` is not local","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/builder.rs","byte_start":2183,"byte_end":2202,"line_start":96,"line_end":96,"column_start":17,"column_end":36,"is_primary":false,"text":[{"text":"#[derive(Debug, displaydoc::Display, Eq, PartialEq, Copy, Clone)]","highlight_start":17,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(displaydoc::Display)]","def_site_span":{"file_name":"/home/dzh/.cargo/registry/src/index.crates.io-6f17d22bba15001f/displaydoc-0.1.7/src/lib.rs","byte_start":161,"byte_end":215,"line_start":11,"line_end":11,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn derive_error(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/bin/builder.rs","byte_start":2183,"byte_end":2202,"line_start":96,"line_end":96,"column_start":17,"column_end":36,"is_primary":false,"text":[{"text":"#[derive(Debug, displaydoc::Display, Eq, PartialEq, Copy, Clone)]","highlight_start":17,"highlight_end":36}],"label":"move the `impl` block outside of this constant `_DERIVE_Display_FOR_FirmwareParseError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/builder.rs","byte_start":2183,"byte_end":2202,"line_start":96,"line_end":96,"column_start":17,"column_end":36,"is_primary":false,"text":[{"text":"#[derive(Debug, displaydoc::Display, Eq, PartialEq, Copy, Clone)]","highlight_start":17,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(displaydoc::Display)]","def_site_span":{"file_name":"/home/dzh/.cargo/registry/src/index.crates.io-6f17d22bba15001f/displaydoc-0.1.7/src/lib.rs","byte_start":161,"byte_end":215,"line_start":11,"line_end":11,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn derive_error(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/bin/builder.rs","byte_start":2183,"byte_end":2183,"line_start":96,"line_end":96,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"#[derive(Debug, displaydoc::Display, Eq, PartialEq, Copy, Clone)]","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/builder.rs","byte_start":2183,"byte_end":2202,"line_start":96,"line_end":96,"column_start":17,"column_end":36,"is_primary":false,"text":[{"text":"#[derive(Debug, displaydoc::Display, Eq, PartialEq, Copy, Clone)]","highlight_start":17,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(displaydoc::Display)]","def_site_span":{"file_name":"/home/dzh/.cargo/registry/src/index.crates.io-6f17d22bba15001f/displaydoc-0.1.7/src/lib.rs","byte_start":161,"byte_end":215,"line_start":11,"line_end":11,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn derive_error(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the derive macro `displaydoc::Display` defines the non-local `impl`, and may need to be changed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the derive macro `displaydoc::Display` may come from an old version of the `displaydoc` crate, try updating your dependency with `cargo update -p displaydoc`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"items in an anonymous const item (`const _: () = { ... }`) are treated as in the same scope as the anonymous const's declaration for the purpose of this lint","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(non_local_definitions)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: non-local `impl` definition, `impl` blocks should be written at the same level as their item\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/builder.rs:96:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, displaydoc::Display, Eq, PartialEq, Copy, Clone)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`Display` is not local\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove the `impl` block outside of this constant `_DERIVE_Display_FOR_FirmwareParseError`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct FirmwareParseError;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`FirmwareParseError` is not local\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the derive macro `displaydoc::Display` defines the non-local `impl`, and may need to be changed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the derive macro `displaydoc::Display` may come from an old version of the `displaydoc` crate, try updating your dependency with `cargo update -p displaydoc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: items in an anonymous const item (`const _: () = { ... }`) are treated as in the same scope as the anonymous const's declaration for the purpose of this lint\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_local_definitions)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `displaydoc::Display` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}
